{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dokumentasi Pengembangan WordPress Bahasa Indonesia","text":"<p>WordPress salah satu Content Management System (CMS) paling populer didunia. Menjadi pilihan utama, selain mudah digunakan juga karena mempunyai kapabilitas untuk dikembangan sesuai kebutuhan. Didalam dokumentasi ini Anda akan mempelajari pengembangan WordPress secara komprehensif.</p>"},{"location":"#sekilas","title":"Sekilas","text":"<p>WordPress cepat, ringan, modular dan sangat mudah digunakan jika dibandingkan dengan CMS lain. Untuk menjaga nilai-nilai tersebut Tim Inti (Core Team) setiap menambahkan fungsionalitas baru selalu dipertimbangkan dengan seksama.</p> <p>Pada banyak kasus pengguna sering kali perlu fungsi tambahan untuk membuatnya tetap sejalan dengan kebutuhan. Katakan pada bisnis logistik Anda membutuhan sistem pelacakan paket sederhana.</p> <p>Aturan</p> <p>Meskipun memungkinkan mengubah file inti WordPress yang telah Anda unduh untuk menambahkan fungsi baru, tetapi tindakan tersebut tidak dibenarkan!.</p> <p>Kenapa? Jika WordPress merilis versi baru katakan perbaikan bugs, maka Anda akan kesulitan untuk melakukan update - semua file yang telah dirubah akan tergantikan dengan file versi terbaru dari WordPress. Dengan demikian Anda diharuskan mengembalikan file yang telah dirubah agar fungsi tambahan dapat digunakan kembali.</p> <p>Tentu saja praktik tersebut sangat menyulikan dan membuang waktu berharga Anda.</p> <p>Cara yang benar menambahkan fungsi baru di WordPress antara lain menggunakan kostum Plugin dan Tema.</p>"},{"location":"#memulai","title":"Memulai","text":"<ul> <li>Standar Koding - Bagaimana standar koding yang benar di WordPress.</li> <li>Membuat Plugin - Pelajari bagaimana membuat plugin WordPress dengan benar.</li> <li>Mempublikasikan Plugin - Sebarkan plugin ke semua pengguna WordPress. Jika memungkinkan, hasilkan uang dengan menjualnya.</li> <li>Membuat Tema - Pelajarai bagaimana membuat tema WordPress dengan benar.</li> <li>Mempublikasikan Tema - Sebarkan tema ke semua pengguna WordPress.</li> <li>Debugging - Referensi dan panduan menggunakan kemampuan debugging bawaan WordPress.</li> <li>Validasi Data - Setiap pengembang WordPress wajib mengetahui ini. Pelajari bagaimana memproses data yang benar untuk memastikan keamanan paling mendasar seperti pencegahan SQL Injection.</li> <li>Pembaruan Plugin dan Tema - Referensi bagaimana agar plugin dan tema selalu kompatibel dengan semua versi WordPress.</li> <li>Referensi <code>function</code> - Kumpulan fungsi-fungsi PHP re-usable yang tersedia di WordPress.</li> <li>Variabel Global - Daftar variable default WordPress dan bagaimana merubahnya sesuai kebutuhan.</li> <li>Post Type - Salah satu building-block WordPress adalah Post Type. Memungkinkan Anda membuat beragam jenis post. WooCommerce memanfaatkan ini untuk memmbuat Produk.</li> <li>Taxonomy - Membuat taksonomi baru tanpa merubah defaultnya WordPress.</li> <li>Shortcode - Potongan kode yang dapat digunakan dimana saja, pelajari cara membuatnya.</li> <li>Reversed Terms - Semua istilah yang telah digunakan di WordPress, jangan mendefinisikannya lagi di kode yang Anda tulis.</li> </ul>"},{"location":"#apis","title":"APIs","text":"<ul> <li>Plugin API - Menggunakan Hooks, Actions dan Filters di plugin atau tema.</li> <li>Dashboard Widget API - Tambahkan fungsi monitoring baru (misal Google Analytics) kedalam halaman Admin WordPress. Pelajari bagian ini.</li> <li>Settings API - Referensi dengan beberapa contoh menambahkan atau merubah di halaman pengaturan.</li> <li>Options API - Referensi bagaimana menyimpan pengaturan.</li> <li>Transients API - Referensi cara menyimpan data sementara dan menggunakannya, seperti Cache.</li> <li>Widgets API - Bagaimana menambahkan widget baru ke sidebar. Umumnya digunakan dalam pengembangan tema.</li> <li>Quicktags API - Referensi menambahkan kostum tombol ke editor HTML (bukan CKEditor).</li> <li>Rewrite API - Pelajari bagaimana cara kerja URL atau routing.</li> <li>API Kostumasi Tema - Detail mengenai Theme Customization Screen.</li> <li>Filesystem API - Referensi bagaimana menangani file seperti cara menerima upload file yang aman dari user (pengunjung website).</li> </ul>"},{"location":"standar-koding/1.1-index/","title":"Intro","text":"<p>WordPress salah satu proyek open-source dengan ribuan kontributor dari seluruh dunia. Penting untuk mengikuti standar agar setiap baris kode yang ditulis konsisten, mudah dibaca dan dipahami oleh semua kontributor yang terlibat.</p> <p>Berikut adalah panduan untuk membantu Anda menulis kode sesuai standar yang telah ditetapkan. Tujuannya agar kode tetap konsisten serta terdokumentasi dengan baik untuk pengguna lain diwaktu yang akan datang (misalnya 20 tahun dari sekarang).</p> <ul> <li>WordPress Coding Standard<ul> <li>Standar Koding CSS</li> <li>Standar koding HTML</li> <li>Standar koding JavaScript</li> <li>Standar Koding PHP</li> </ul> </li> </ul>"},{"location":"standar-koding/1.2-wordpress-coding-standard/","title":"WordPress Coding Standard","text":""},{"location":"standar-koding/1.2-wordpress-coding-standard/#latar-belakang","title":"Latar Belakang","text":"<p>Tujuan dari diterapkannya WordPress Coding Standard adalah agar memudahkan kolaborasi antar pengembang dalam menulis kode karena memiliki standar yang sama. Mulai dari kode intinya (WordPress Core) sampai ke pengembangan plugin dan temanya.</p> <p>Komunitas WordPress mengembangkan standar koding sendiri akan diterangkan dalam bab ini. Perlu diketahui bahwa mengikuti standar koding TIDAK DIWAJIBKAN namun sangat dianjurkan sebagai tanda bahwa Anda merupakan salah satu pengembang WordPress yang berkualitas! \ud83d\ude0e</p>"},{"location":"standar-koding/1.2-wordpress-coding-standard/#mengapa-ada-standar-koding","title":"Mengapa ada standar koding?","text":"<p>Standar koding membantu menghindari kesalahan umum penulisan kode, meningkatkan keterbacaan kode serta menyederhanakannya. Standar memastikan bahwa setiap file yang ada seolah-olah dibuat oleh satu orang.</p> <p>Mengikuti standar memastikan siapapun yang terlibat dalam memahami dengan baik setiap baris kode untuk memodifikasinya sesuai kebutuhan (seperti improvasi, dll). Tidak perduli baris kode sebelumnya dibuat kapan dan oleh siapa.</p> <p>Jika Anda berencana untuk berkontribusi kedalam kode inti WordPress maka WAJIB mengikuti standar ini. Setiap baris kode yang masuk kedalam kode inti WordPress harus benar-benar dijaga dengan seksama.</p>"},{"location":"standar-koding/1.2-wordpress-coding-standard/#standar-berdasarkan-bahasa-pemprograman","title":"Standar berdasarkan bahasa pemprograman","text":"<p>Umumnya WordPress menggunakan empat bahasa pemprograman yakni: PHP, HTML, CSS dan JavaScript. Setiap bahasa tersebut memiliki standarnya tersendiri.</p> <ul> <li>CSS Coding Standards</li> <li>HTML Coding Standards</li> <li>JavaScript Coding Standards</li> <li>PHP Coding Standards</li> </ul>"},{"location":"standar-koding/1.2.1-css-coding-standard/","title":"Standar Koding CSS","text":"<p>Meskipun tidak semua tapi masih banyak ditemukan pengembang yang menganggap penulisan CSS dengan kaidah yang benar bukan hal penting. Sehingga banyak ditemukan kode CSS tidak konsisten.</p> <p>Panduan ini membantu Anda terhindari dari ketidakkonsistenan tersebut. Membuat kode CSS yang Anda tulis lebih terlihat rapi, mudah dibaca dan dipahami.</p>"},{"location":"standar-koding/1.2.1-css-coding-standard/#struktur","title":"Struktur","text":"<p>Ada banyak metode untuk menyusun stylesheet, dengan CSS sebagai poin pentingnya - maka mempertahankan tingkat keterbacaan merupakan hal penting.</p> <ul> <li>Indentasi menggnakan tabs bukan bukan spasi untuk setiap property.</li> <li>Gunakan dua baris kosong antara blok selector dan satu baris antara property.</li> <li>Setiap selector, property dan value dalam barisnya sendiri.</li> <li>Kurung kurawal rata kiri.</li> </ul> <p>Penulisan CSS yang benar;</p> <pre><code>#selector-1,\n#selector-2,\n#selector-3 {\n    background: #fff;\n    color: #000;\n}\n</code></pre> <p>Salah;</p> <pre><code>#selector-1, #selector-2, #selector-3 {\n    background: #fff;\n    color: #000;\n    }\n\n#selector-1 { background: #fff; color: #000; }\n</code></pre>"},{"location":"standar-koding/1.2.1-css-coding-standard/#selectors","title":"Selectors","text":"<p>Penulisan selector CSS tanpa batasan - namun perlu diketahui, menulisnya tanpa panduan justru membuat Anda tersesat dikemudian hari. Jadi bijaklah dalam memberi penamaan, gaya penulisan dan kemudahan untuk dipahami. Berikut panduan menulis CSS jika Anda berniat menggunakannya didalam ekosistem WordPress.</p> <ul> <li>Serupa dengan Koding Standar PHP dalam hal penamaan file, gunakan huruf kecil. Untuk memisahkan kata gunakan tanda hubung (<code>-</code>), hindari huruf besar dan garis bawah.</li> <li>Berikan penamaan yang mudah dibaca dan dipahami oleh manusia agar. Jangan berniat menyesatkan pengembang lain. </li> <li>Gunakan tanda kutip ganda (<code>\"</code>) jika ingin memberi style pada element dengan attribute tertentu.</li> <li>Hindari memasukkan nama element seperti <code>div.container</code>, yang tepat adalah <code>.container</code> saja tanpa <code>div</code>.</li> </ul> <p>Benar:</p> <pre><code>#comment-form {\n    margin: 1em 0;\n}\n\ninput[type=\"text\"] {\n    line-height: 1.1;\n}\n</code></pre> <p>Salah:</p> <pre><code>#commentForm { /* Hindari camelcase. */\n    margin: 0;\n}\n\n#comment_form { /* Hindari garis bawah. */\n    margin: 0;\n}\n\ndiv#comment_form { /* Hindari memasukkan nama element. */\n    margin: 0;\n}\n\n#c1-xr { /* Apa itu c1-xr?! Gunakan penamaan yang jelas dan desktriptif. */\n    margin: 0;\n}\n\ninput[type=text] { /* Harusnya [type=\"text\"] */\n    line-height: 110% /* Apa ini? Lebih baik 1.2rem, atau sejenis */\n}\n</code></pre>"},{"location":"standar-koding/1.2.1-css-coding-standard/#property","title":"Property","text":"<p>Masih sama dengan selector diatas, berikut panduannya;</p> <ul> <li><code>property</code> harus diakhiri dengan titik dua (<code>:</code>) dan spasi setelah titik dua.</li> <li>Nama property dan value nya menggunakan huruf kecil semua. Kecuali untuk nama font (contoh: Roboto) dan property vendor-specific.</li> <li>Gunakan kode hex atau rgba untuk property <code>color</code>. Hindari menggunakan nama warna seperti <code>red</code>. Hindari format <code>RGB</code> dan huruf besar.</li> <li>Persingkat nilai jika memungkinkan. <code>#FFFFFF</code> bisa disingkat menjadi <code>#fff</code>. Untuk daftar singkatan lain baca dokumentasi CSS Shorthand.</li> </ul> <p>Benar:</p> <pre><code>#selector-1 {\n    background: #fff;\n    display: block;\n    margin: 0;\n    margin-left: 20px;\n}\n</code></pre> <p>Salah:</p> <pre><code>#selector-1 {\n    background:#FFFFFF; /* Tidak ada spasi setelah titik dua, menggunakan huruf besar (salah) */\n    display: BLOCK; /* Pastikan menggunakan huruf kecil, tepatnya `block` */\n    margin-left: 20PX; /* Hindari huruf besar */\n    margin: 0; /* Lebih baik tulis menjadi 10px atau 10rem */\n}\n</code></pre>"},{"location":"standar-koding/1.2.1-css-coding-standard/#pengurutan-property","title":"Pengurutan Property","text":"<p>Tips</p> <p>Apabila memiliki banyak property yang serupa, kelompokkan menjadi satu.</p> <p>Tidak mengurutkan property membuat Anda kebingungan sendiri dimasa mendatang. CSS terkesan acak-acakan, tidak rapi padahal slogan dari WordPress: \"Kode itu Puisi\", karenanya kode perlu dirangkai sedemikian rupa agar elegan.</p> <p>Dasar pengurutannya adalah seperti ini:</p> <ul> <li>Tampilan (Display) contohnya: <code>display</code>, <code>margin</code> dan yang serupa.</li> <li>Positioning, contohnya: <code>top</code>, <code>right</code>, <code>position</code> dan yang serupa.</li> <li>Box model, contohnya: <code>border-radius</code> dan yang serupa.</li> <li>Warna dan Tipografi: <code>background-color</code>, <code>font-family</code> dan yang serupa.</li> <li>Lainnya: misalnya property CSS3 Animation.</li> </ul> <p>Contoh dalam penulisan kode CSS yang benar:</p> <pre><code>#scroll-top {\n    display: inline-block;\n    position: absolute;\n    top: auto;\n    bottom: 25px;\n    right: 25px;\n    z-index: 15;\n    border-radius: 5px;\n    border-width: 1px;\n    border-color: #000;\n    border-style: solid;\n    background-color: #555;\n    ...dst\n}\n</code></pre> <p>Ini kurang tepat, tidak dikelompokkan:</p> <pre><code>#scroll-top {\n    z-index: 15;\n    background-color: #555;\n    position: absolute;\n    border-radius: 5px;\n    top: auto;\n    right: 25px;\n    bottom: 10px;\n    ..dst\n}\n</code></pre> <p>Cara lain adalah mengurutukan property bedasarkan abjad, contohnya:</p> <pre><code>#scroll-top {\n    background-color: #555;\n    border: 1px solid #000;\n    bottom: 25px;\n    position: absolute;\n    right: 15px;\n    z-index: 15;\n}\n</code></pre> <p>Pengurutan berdasarkan abjad banyak digunakan oleh tim inti pengembang tema dari WordPress.</p>"},{"location":"standar-koding/1.2.2-html-coding-standard/","title":"Standar Koding HTML","text":"<p>ada</p>"},{"location":"standar-koding/1.2.3-javascript-coding-standard/","title":"Standar Koding JavaScript","text":"<p>ada</p>"},{"location":"standar-koding/1.2.4-php-coding-standard/","title":"Standar Koding PHP","text":"<p>ada</p>"}]}